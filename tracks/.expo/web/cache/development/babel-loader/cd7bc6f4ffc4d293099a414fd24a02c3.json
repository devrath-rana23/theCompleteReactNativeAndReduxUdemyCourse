{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/var/www/html/theCompleteReactNativeAndReduxUdemyCourse/tracks/node_modules/react-native-maps/lib/components/Geojson.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport MapView from \"./MapView\";\nexport var makeOverlays = function makeOverlays(features) {\n  var points = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'point'\n    });\n  });\n  var lines = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'LineString' || f.geometry.type === 'MultiLineString');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polyline'\n    });\n  });\n  var multipolygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'MultiPolygon';\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []);\n  var polygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'Polygon';\n  }).map(function (feature) {\n    return makeOverlay(makeCoordinates(feature), feature);\n  }).reduce(flatten, []).concat(multipolygons).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polygon'\n    });\n  });\n  return points.concat(lines).concat(polygons);\n};\n\nvar flatten = function flatten(prev, curr) {\n  return prev.concat(curr);\n};\n\nvar makeOverlay = function makeOverlay(coordinates, feature) {\n  var overlay = {\n    feature: feature\n  };\n\n  if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\n    overlay.coordinates = coordinates[0];\n\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n\n  return overlay;\n};\n\nvar makePoint = function makePoint(c) {\n  return {\n    latitude: c[1],\n    longitude: c[0]\n  };\n};\n\nvar makeLine = function makeLine(l) {\n  return l.map(makePoint);\n};\n\nvar makeCoordinates = function makeCoordinates(feature) {\n  var g = feature.geometry;\n\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map(function (p) {\n      return p.map(makeLine);\n    });\n  } else {\n    return [];\n  }\n};\n\nvar Geojson = function Geojson(props) {\n  var overlays = makeOverlays(props.geojson.features);\n  return React.createElement(React.Fragment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, overlays.map(function (overlay, index) {\n    if (overlay.type === 'point') {\n      return React.createElement(MapView.Marker, {\n        key: index,\n        coordinate: overlay.coordinates,\n        pinColor: props.color,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      });\n    }\n\n    if (overlay.type === 'polygon') {\n      return React.createElement(MapView.Polygon, {\n        key: index,\n        coordinates: overlay.coordinates,\n        holes: overlay.holes,\n        strokeColor: props.strokeColor,\n        fillColor: props.fillColor,\n        strokeWidth: props.strokeWidth,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      });\n    }\n\n    if (overlay.type === 'polyline') {\n      return React.createElement(MapView.Polyline, {\n        key: index,\n        coordinates: overlay.coordinates,\n        strokeColor: props.strokeColor,\n        strokeWidth: props.strokeWidth,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }\n      });\n    }\n  }));\n};\n\nexport default Geojson;","map":{"version":3,"names":["React","MapView","makeOverlays","features","points","filter","f","geometry","type","map","feature","makeCoordinates","coordinates","makeOverlay","reduce","flatten","overlay","lines","multipolygons","polygons","concat","prev","curr","length","holes","slice","makePoint","c","latitude","longitude","makeLine","l","g","p","Geojson","props","overlays","geojson","index","color","strokeColor","fillColor","strokeWidth"],"sources":["/var/www/html/theCompleteReactNativeAndReduxUdemyCourse/tracks/node_modules/react-native-maps/lib/components/Geojson.js"],"sourcesContent":["import React from 'react';\nimport MapView from './MapView';\n\nexport const makeOverlays = features => {\n  const points = features\n    .filter(\n      f =>\n        f.geometry &&\n        (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint')\n    )\n    .map(feature =>\n      makeCoordinates(feature).map(coordinates =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map(overlay => ({ ...overlay, type: 'point' }));\n\n  const lines = features\n    .filter(\n      f =>\n        f.geometry &&\n        (f.geometry.type === 'LineString' ||\n          f.geometry.type === 'MultiLineString')\n    )\n    .map(feature =>\n      makeCoordinates(feature).map(coordinates =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map(overlay => ({ ...overlay, type: 'polyline' }));\n\n  const multipolygons = features\n    .filter(f => f.geometry && f.geometry.type === 'MultiPolygon')\n    .map(feature =>\n      makeCoordinates(feature).map(coordinates =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, []);\n\n  const polygons = features\n    .filter(f => f.geometry && f.geometry.type === 'Polygon')\n    .map(feature => makeOverlay(makeCoordinates(feature), feature))\n    .reduce(flatten, [])\n    .concat(multipolygons)\n    .map(overlay => ({ ...overlay, type: 'polygon' }));\n\n  return points.concat(lines).concat(polygons);\n};\n\nconst flatten = (prev, curr) => prev.concat(curr);\n\nconst makeOverlay = (coordinates, feature) => {\n  let overlay = {\n    feature,\n  };\n  if (\n    feature.geometry.type === 'Polygon' ||\n    feature.geometry.type === 'MultiPolygon'\n  ) {\n    overlay.coordinates = coordinates[0];\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n  return overlay;\n};\n\nconst makePoint = c => ({ latitude: c[1], longitude: c[0] });\n\nconst makeLine = l => l.map(makePoint);\n\nconst makeCoordinates = feature => {\n  const g = feature.geometry;\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map(p => p.map(makeLine));\n  } else {\n    return [];\n  }\n};\n\nconst Geojson = props => {\n  const overlays = makeOverlays(props.geojson.features);\n  return (\n    <React.Fragment>\n      {overlays.map((overlay, index) => {\n        if (overlay.type === 'point') {\n          return (\n            <MapView.Marker\n              key={index}\n              coordinate={overlay.coordinates}\n              pinColor={props.color}\n            />\n          );\n        }\n        if (overlay.type === 'polygon') {\n          return (\n            <MapView.Polygon\n              key={index}\n              coordinates={overlay.coordinates}\n              holes={overlay.holes}\n              strokeColor={props.strokeColor}\n              fillColor={props.fillColor}\n              strokeWidth={props.strokeWidth}\n            />\n          );\n        }\n        if (overlay.type === 'polyline') {\n          return (\n            <MapView.Polyline\n              key={index}\n              coordinates={overlay.coordinates}\n              strokeColor={props.strokeColor}\n              strokeWidth={props.strokeWidth}\n            />\n          );\n        }\n      })}\n    </React.Fragment>\n  );\n};\n\nexport default Geojson;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}