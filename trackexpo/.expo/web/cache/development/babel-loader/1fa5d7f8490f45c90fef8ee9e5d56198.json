{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"../_mockLocation\";\nimport React, { useContext } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text } from \"react-native-elements\";\nimport { withNavigationFocus } from \"react-navigation\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Map from \"../components/Map\";\nimport { Context as LocationContext } from \"../context/LocationContext\";\nimport useLocation from \"../hooks/useLocation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar TrackCreateScreen = function TrackCreateScreen(_ref) {\n  var isFocused = _ref.isFocused;\n\n  var _useContext = useContext(LocationContext),\n      addLocation = _useContext.addLocation;\n\n  var _useLocation = useLocation(isFocused, addLocation),\n      _useLocation2 = _slicedToArray(_useLocation, 1),\n      err = _useLocation2[0];\n\n  console.log(isFocused);\n  return _jsxs(SafeAreaView, {\n    forceInset: {\n      top: \"always\"\n    },\n    children: [_jsx(Text, {\n      h2: true,\n      children: \"Create a Track\"\n    }), _jsx(Map, {}), err ? _jsx(Text, {\n      children: \"Please enable location services\"\n    }) : null]\n  });\n};\n\nvar styles = StyleSheet.create({});\nexport default withNavigationFocus(TrackCreateScreen);","map":{"version":3,"names":["React","useContext","Text","withNavigationFocus","SafeAreaView","Map","Context","LocationContext","useLocation","TrackCreateScreen","isFocused","addLocation","err","console","log","top","styles","StyleSheet","create"],"sources":["/var/www/html/theCompleteReactNativeAndReduxUdemyCourse/trackexpo/src/screens/TrackCreateScreen.js"],"sourcesContent":["import \"../_mockLocation\";\nimport React, { useContext } from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Text } from \"react-native-elements\";\nimport { withNavigationFocus } from \"react-navigation\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Map from \"../components/Map\";\nimport { Context as LocationContext } from \"../context/LocationContext\";\nimport useLocation from \"../hooks/useLocation\";\n\n// Pass this prop in withNavigationFocus tell us whether or not this particular component is currently focused or actually visible\nconst TrackCreateScreen = ({ isFocused }) => {\n  const { addLocation } = useContext(LocationContext);\n  //Now if we have a project where we need user's location changing over time we can just import useLocation Hook and paas a callback function inside it and get error when somthing goes wrong when we tried to ask for permission\n  const [err] = useLocation(isFocused, addLocation);\n\n  console.log(isFocused); //gives true if this screen is focused\n\n  return (\n    <SafeAreaView forceInset={{ top: \"always\" }}>\n      <Text h2>Create a Track</Text>\n      <Map />\n      {err ? <Text>Please enable location services</Text> : null}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({});\n\nexport default withNavigationFocus(TrackCreateScreen);\n"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;;AAEA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,OAAOC,GAAP;AACA,SAASC,OAAO,IAAIC,eAApB;AACA,OAAOC,WAAP;;;;AAGA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAmB;EAAA,IAAhBC,SAAgB,QAAhBA,SAAgB;;EAC3C,kBAAwBT,UAAU,CAACM,eAAD,CAAlC;EAAA,IAAQI,WAAR,eAAQA,WAAR;;EAEA,mBAAcH,WAAW,CAACE,SAAD,EAAYC,WAAZ,CAAzB;EAAA;EAAA,IAAOC,GAAP;;EAEAC,OAAO,CAACC,GAAR,CAAYJ,SAAZ;EAEA,OACE,MAAC,YAAD;IAAc,UAAU,EAAE;MAAEK,GAAG,EAAE;IAAP,CAA1B;IAAA,WACE,KAAC,IAAD;MAAM,EAAE,MAAR;MAAA;IAAA,EADF,EAEE,KAAC,GAAD,KAFF,EAGGH,GAAG,GAAG,KAAC,IAAD;MAAA;IAAA,EAAH,GAAkD,IAHxD;EAAA,EADF;AAOD,CAdD;;AAgBA,IAAMI,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB,EAAlB,CAAf;AAEA,eAAef,mBAAmB,CAACM,iBAAD,CAAlC"},"metadata":{},"sourceType":"module"}